__author__ = 'jhajagos'


"""
    Generate a CSV file for loading the file into a PostGreSQL database inorder
    to calculate a diagnosis co-occurrence matrix

        Two axes in age and gender
        A code list (code, description)

        Number of patients
        Each encounter gets a number

    The data generated by the null model would be an unrealistic representation
        (e.g., a 2 year old male with a pregnancy)

        Here the null model assumes that a diagnosis on any given date during the period.
        The number of encounters is

    You must run get_and_format_ccs_code_mappings.py first

"""

import numpy as np
import csv
import os

DIMENSION_GENDER = ["M", "F"]
DIMENSION_GENDER_DICT = {"M": "Male", "F": "Female"}
DIMENSION_ONE_NAME = "Gender"
DIMENSION_TWO_NAME = "Age"
DIMENSION_AGE = range(86)
DIMENSION_AGE_DICT = {}
for age in DIMENSION_AGE:
    DIMENSION_AGE_DICT[age] = str(age)

CODE_NAME = "ccs_diagnosis"

def get_acs_files():
    pass

def load_dimensions():
    return DIMENSION_GENDER_DICT, DIMENSION_AGE_DICT

def read_codes_into_dict(code_file_name="./data/cleaned_dxlabel_2013.csv", code_field="CCS DIAGNOSIS CATEGORIES", description_field="CCS DIAGNOSIS CATEGORIES LABELS"):
    """Read a code file consisting code and description"""
    with open(code_file_name, "r") as f:
        code_dict = {}
        csv_dict_reader = csv.DictReader(f)

        for csv_dict in csv_dict_reader:
            code_dict[csv_dict[code_field]] = csv_dict[description_field]

    return code_dict


def define_number_map(code_dict):
    code_map_list = code_dict.keys()
    code_map_list.sort()

    forward_map_dict = {}
    reverse_map_dict = {}

    i = 0
    for code_key in code_map_list:

        forward_map_dict[code_key] = i
        reverse_map_dict[i] = code_key

        i += 1

    return forward_map_dict, reverse_map_dict


def main(number_of_days, number_of_patients, mean_number_of_encounters, mean_number_of_dx_per_encounter):

    dimension_gender, dimension_age = load_dimensions()

    code_dict = read_codes_into_dict()

    forward_code_map_dict, reverse_map_dict = define_number_map(code_dict)

    gender_f_dict, gender_r_dict = define_number_map(dimension_gender)

    # The Assumption here is that a patient has an age at some point in a 365 day year

    birth_dates = np.random.random_integers(1, 365, number_of_patients)

    patient_age = np.random.random_integers(0, len(dimension_age) - 1, number_of_patients)
    patient_gender = np.random.random_integers(0, len(dimension_gender) - 1, number_of_patients)

    patient_encounter_counts = np.random.poisson(mean_number_of_encounters, number_of_patients)


    csv_header = ["patient_id", "encounter_id", "sequence_id", "encounter_day", CODE_NAME, CODE_NAME + "_description", DIMENSION_ONE_NAME, DIMENSION_TWO_NAME]
    print(csv_header)

    encounter_counter = 1
    with open("./synthetic_diagnosis_data_set.csv", "wb") as fw:
        cw = csv.writer(fw)
        cw.writerow(csv_header)
        for i in range(number_of_patients):
            patient_number_of_encounters = patient_encounter_counts[i]
            patient_number_of_encounter_per_dx = np.random.poisson(mean_number_of_dx_per_encounter, patient_number_of_encounters)
            date_of_visits = np.random.random_integers(1, number_of_days, patient_number_of_encounters)
            birth_date = birth_dates[i]
            date_of_visits.sort()

            patient_age_at_time_zero = patient_age[i]

            patient_gender_code = gender_r_dict[patient_gender[i]]

            for j in range(patient_number_of_encounters):

                sequence_id = 0
                date_of_visit = date_of_visits[j]

                years_since_start = date_of_visit // 365
                if birth_date <= date_of_visit:
                    birthday_bonus = 1
                else:
                    birthday_bonus = 0

                age_at_visit = patient_age_at_time_zero + years_since_start + birthday_bonus

                for k in range(int(patient_number_of_encounter_per_dx[j])):

                    ccs = np.random.random_integers(0, len(code_dict)-1, 1)[0]

                    ccs_code = reverse_map_dict[ccs]
                    ccs_code_description = code_dict[ccs_code]

                    row_to_write = [i, encounter_counter, sequence_id, date_of_visit, ccs_code, ccs_code_description, patient_gender_code, age_at_visit]
                    cw.writerow(row_to_write)
                    sequence_id += 1

                encounter_counter += 1





if __name__ == "__main__":
    main(365, 1000, 10, 1)